/**
 * This class is generated by jOOQ
 */
package io.github.jklingsporn.vertx.auth.jooq.generated.tables.daos;


import io.github.jklingsporn.vertx.VertxDAO;
import io.github.jklingsporn.vertx.auth.jooq.generated.tables.User;
import io.github.jklingsporn.vertx.auth.jooq.generated.tables.records.UserRecord;

import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


import io.vertx.core.Handler;
import io.vertx.core.AsyncResult;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User, String> implements VertxDAO<io.github.jklingsporn.vertx.auth.jooq.generated.tables.records.UserRecord,io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User,java.lang.String> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User object) {
        return object.getUsername();
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code>
     */
    public List<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User> fetchByUsername(String... values) {
        return fetch(User.USER.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>USERNAME = value</code>
     */
    public io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User fetchOneByUsername(String value) {
        return fetchOne(User.USER.USERNAME, value);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User> fetchByPassword(String... values) {
        return fetch(User.USER.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>PASSWORD_SALT IN (values)</code>
     */
    public List<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User> fetchByPasswordSalt(String... values) {
        return fetch(User.USER.PASSWORD_SALT, values);
    }

    /**
     * Fetch records that have <code>USERNAME IN (values)</code> asynchronously
     */
    public void fetchByUsernameAsync(List<String> values,Handler<AsyncResult<List<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User>>> resultHandler) {
        fetchAsync(User.USER.USERNAME,values,resultHandler);
    }

    /**
     * Fetch a unique record that has <code>USERNAME = value</code> asynchronously
     */
    public void fetchOneByUsernameAsync(String value,Handler<AsyncResult<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User>> resultHandler) {
        vertx().executeBlocking(h->h.complete(fetchOneByUsername(value)),resultHandler);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code> asynchronously
     */
    public void fetchByPasswordAsync(List<String> values,Handler<AsyncResult<List<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User>>> resultHandler) {
        fetchAsync(User.USER.PASSWORD,values,resultHandler);
    }

    /**
     * Fetch records that have <code>PASSWORD_SALT IN (values)</code> asynchronously
     */
    public void fetchByPasswordSaltAsync(List<String> values,Handler<AsyncResult<List<io.github.jklingsporn.vertx.auth.jooq.generated.tables.pojos.User>>> resultHandler) {
        fetchAsync(User.USER.PASSWORD_SALT,values,resultHandler);
    }

    private io.vertx.core.Vertx vertx;

    @Override
    public void setVertx(io.vertx.core.Vertx vertx) {
        this.vertx = vertx;
    }

    @Override
    public io.vertx.core.Vertx vertx() {
        return this.vertx;
    }

}
